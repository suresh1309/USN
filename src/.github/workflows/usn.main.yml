name: 'USN'

on:
  workflow_dispatch:
     

env:
  ARM_CLIENT_ID: ${{secrets.HUB_SP_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.HUB_SP_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.HUB_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.HUB_SP_TENANT_ID}}
  ROOT_PATH: '${{ github.workspace }}/src/terraform'
  ENV_PATH: '${{ github.workspace }}/src/terraform/environments/hub.tfvars'


jobs:
  terraform_plan:
    name: 'HUB ENVIRONMENT DEPLOYMENT'
    runs-on: ubuntu-latest
   
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: GitHub Action Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Terraform Configuration
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Installation
      run: terraform init
      working-directory: ${{env.ROOT_PATH}}
   
    # Generates an execution plan for Terraform
    - name: Terraform Plan Execution
      run: terraform plan -var-file "${{env.ENV_PATH}}"
      working-directory: ${{env.ROOT_PATH}}
 
      # Generates an execution plan for Terraform
    - name: Terraform Provisioning
      run: terraform apply --auto-approve -var-file "${{env.ENV_PATH}}"
      working-directory: ${{env.ROOT_PATH}}
